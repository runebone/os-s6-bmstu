#!/bin/sh

awk 'NR == 1 {
    print "1) " "pid="$1" - уникальный идентификатор процесса\n";
    print "2) " "comm="$2" - имя исполняемого файла в круглых скобках\n";
    print "3) " "state="$3" - состояние процесса\n";
    print "4) " "ppid="$4" - уникальный идентификатор процесса-предка\n";
    print "5) " "pgrp="$5" - уникальный идентификатор группы\n";
    print "6) " "session="$6" - уникальный идентификатор сессии\n";
    print "7) " "tty_nr="$7" - управляющий терминал\n";
    print "8) " "tpgid="$8" - уникальный идентификатор группы управляющего терминала\n";
    print "9) " "flags="$9" - флаги\n";
    print "10) " "minflt="$10" - Количество незначительных сбоев, которые возникли при выполнении процесса, и которые не требуют загрузки страницы памяти с диска\n";
    print "11) " "cminflt="$11" - количество незначительных сбоев, которые возникли при ожидании окончания работы процессов-потомков\n";
    print "12) " "majflt="$12" - количество значительных сбоев, которые возникли при работе процесса, и которые потребовали загрузки страницы памяти с диска\n";
    print "13) " "cmajflt="$13" - количество значительных сбоев, которые возникли при ожидании окончания работы процессов-потомков\n";
    print "14) " "utime="$14" - количество тиков, которые данный процесс провел в режиме пользователя\n";
    print "15) " "stime="$15" - количество тиков, которые данный процесс провел в режиме ядра\n";
    print "16) " "cutime="$16" - количество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме пользователя\n";
    print "17) " "cstime="$17" - количество тиков, которые процесс, ожидающий завершения процессов-потомков, провёл в режиме ядра\n";
    print "18) " "priority="$18" - для процессов реального времени это отрицательный приоритет планирования минус один, то есть число в диапазоне от -2 до -100, соответствующее приоритетам в реальном времени от 1 до 99. Для остальных процессов это необработанное значение nice, представленное в ядре. Ядро хранит значения nice в виде чисел в диапазоне от 0 (высокий) до 39 (низкий), соответствующих видимому пользователю диапазону от -20 до 19\n";
    print "19) " "nice="$19" - значение для nice в диапазоне от 19 (наиболее низкий приоритет) до -20 (наивысший приоритет)\n";
    print "20) " "num_threads="$20" - \033[34mчисло потоков в данном процессе\033[0m\n";
    print "21) " "itrealvalue="$21" - количество мигов до того, как следующий SIGALARM будет послан процессу интервальным таймером. С ядра версии 2.6.17 больше не поддерживается и установлено в 0\n";
    print "22) " "starttime="$22" - время в тиках запуска процесса после начальной загрузки системы\n";
    print "23) " "vsize="$23" - \033[34mразмер виртуальной памяти в байтах\033[0m\n";
    print "24) " "rss="$24" - резидентный размер: количество страниц, которые занимает процесс в памяти. Это те страницы, которые заняты кодом, данными и пространством стека. Сюда не включаются страницы, которые не были загружены по требованию или которые находятся в своппинге\n";
    print "25) " "rsslim="$25" - текущий лимит в байтах на резидентный размер процесса\n";
    print "26) " "startcode="$26" - адрес, выше которого может выполняться код программы\n";
    print "27) " "endcode="$27" - адрес, ниже которого может выполняться код программ\n"; 
    print "28) " "startstack="$28" - адрес начала стека\n"; 
    print "29) " "kstkesp="$29" - текущее значение ESP (указателя стека)\n"; 
    print "30) " "kstkeip="$30" - текущее значение EIP (указатель команд)\n"; 
    print "31) " "signal="$31" - битовая карта ожидающих сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status\n"; 
    print "32) " "blocked="$32" - битовая карта блокируемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status\n"; 
    print "33) " "sigignore="$33" - битовая карта игнорируемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status\n"; 
    print "34) " "sigcatch="$34" - битовая карта перехватываемых сигналов. Устарела, потому что не предоставляет информацию о сигналах реального времени, необходимо использовать /proc/[pid]/status\n"; 
    print "35) " "wchan="$35" - \"канал\", в котором ожидает процесс\n";  
    print "36) " "nswap="$36" - количество страниц на своппинге (не обслуживается)\n"; 
    print "37) " "сnswap="$37" - суммарное nswap для процессов-потомков (не обслуживается)\n"; 
    print "38) " "exit_signal="$38" - сигнал, который будет послан предку, когда процесс завершится\n"; 
    print "39) " "processor="$39" - номер процессора, на котором последний раз выполнялся процесс\n"; 
    print "40) " "rt_priority="$40" - приоритет планирования реального времени, число в диапазоне от 1 до 99 для процессов реального времени, 0 для остальных\n"; 
    print "41) " "policy="$41" - политика планирования\n"; 
    print "42) " "delayacct_blkio_ticks="$42" - суммарные задержки ввода/вывода в тиках\n"; 
    print "43) " "guest_time="$43" - гостевое время процесса (время, потраченное на выполнение виртуального процессора на гостевой операционной системе) в тиках\n"; 
    print "44) " "cguest_time="$44" - гостевое время для потомков процесса в тиках\n"; 
    print "45) " "start_data="$45" - адрес, выше которого размещаются инициализированные и неинициализированные (BSS) данные программы\n"; 
    print "46) " "end_data="$46" - адрес, ниже которого размещаются инициализированные и неинициализированные (BSS) данные программы\n"; 
    print "47) " "start_brk="$47" - адрес, выше которого куча программы может быть расширена с использованием brk()\n"; 
    print "48) " "arg_start="$48" - адрес, выше которого размещаются аргументы командной строки (argv)\n"; 
    print "49) " "arg_end="$49" - адрес, ниже которого размещаются аргументы командной строки (argv)\n"; 
    print "50) " "env_start="$50" - адрес, выше которого размещается окружение программы\n"; 
    print "51) " "env_end="$51" - адрес, ниже которого размещается окружение программы\n"; 
    print "52) " "exit_code="$52" - статус завершения потока в форме, возвращаемой waitpid()\n";
} NR > 1 {print $0}'
